#!/usr/bin/env bash

### ###################################
### Courtesy of:
###    https://github.com/mattbryson/bash-arg-parse
### ###################################

set -e

function usage
{
  echo "     [ SCRIPT FOR RUNNING TASKS FOR GIT HOOKS AND CI/CD ]"
  echo

  echo "usage: hooks --task TASK -s SOME_MORE_ARGS [-y YET_MORE_ARGS || -h]"
  echo "   ";
  echo "  -t | --task              : Which task to execute";
  echo "  -f | --fail_on_error     : Fail on error or fail silently";
  # echo "  -a | --sarg              : A super special argument";
  # echo "  -s | --some_more_args    : Another argument";
  echo "  -y | --yet_more_args     : An optional argument";
  echo "  -h | --help              : This message";
}

function parse_args
{
  # positional args
  args=()

  # named args
  while [ "$1" != "" ]; do
      case "$1" in
          -t | --task )                 task="$2";               shift;;
          # -a | --an_arg )               an_arg="$2";             shift;;
          # -s | --some_more_args )       some_more_args="$2";     shift;;
          -y | --yet_more_args )        yet_more_args="$2";      shift;;
          -h | --help )                 usage;                   exit;; # quit and show usage
          * )                           args+=("$1")             # if no match, add it to the positional args
      esac
      shift # move to next kv pair
  done

  # restore positional args
  set -- "${args[@]}"

  # set positionals to vars
  positional_1="${args[0]}"
  positional_2="${args[1]}"
  positional_3="${args[2]}"
  positional_4="${args[3]}"
  positional_5="${args[4]}"
  positional_6="${args[5]}"
  positional_7="${args[6]}"
  positional_8="${args[7]}"
  positional_9="${args[8]}"

  # validate required args
  if [[ -z "${task}" ]]; then
  # if [[ -z "${task}" || -z "${some_more_args}" ]]; then
      echo "Invalid arguments"
      usage
      exit;
  fi

  # set defaults
  if [[ -z "$yet_more_args" ]]; then
      yet_more_args="a default value";
  fi
}


function run
{
  parse_args "$@"

  if [ $task == 'lint_php' ]; then
    lint_php
  elif [ $task == 'unit_tests_php' ]; then
    unit_tests_php
  elif [ $task == 'code_sniffer_php' ]; then
    code_sniffer_php
  elif [ $task == 'code_sniffer_autofix_php' ]; then
    code_sniffer_autofix_php
  elif [ $task == 'code_sniffer_php_change_only' ]; then
        code_sniffer_php_change_only
  elif [ $task == 'static_analysis_php' ]; then
    static_analysis_php
  fi
}

function debug_print_args
{
  echo "you passed in..."

  echo "Task: $task"

  echo "positional arg 1: $positional_1"
  echo "positional arg 2: $positional_2"
  echo "positional arg 3: $positional_3"
  echo "positional arg 4: $positional_4"
  echo "positional arg 5: $positional_5"
  echo "positional arg 6: $positional_6"
  echo "positional arg 7: $positional_7"
  echo "positional arg 8: $positional_8"
  echo "positional arg 9: $positional_9"

  echo "named arg: some_more_args: $some_more_args"
  echo "named arg: yet_more_args: $yet_more_args"

}

function lint_php
{
  echo "[Task] - Linting PHP files in folder [$positional_1]"

  tmpfile=$(mktemp /tmp/hook-script.XXXXXX)
  find ./$positional_1 -path ./vendor -prune -false -o -name "*.php" -print0 | xargs -0 -n1 -P8 php -l > ${tmpfile} || true
  lint_log=$(cat ${tmpfile} | sed '/^No syntax errors/d')

  if [ ! -z "$lint_log" ]
  then
    echo
    echo "Errors found. Here is the output:"
    echo "================================="
    echo ${lint_log}
    rm ${tmpfile}
    echo
    echo "- ERROR: Linting errors detected. üö´"
    exit 1
  fi

  rm ${tmpfile}
  echo "- No linting errors detected. Success! üèÜ"
}

function unit_tests_php
{
  echo "[Task] - Execute Unit Tests (PHP)"
  ./vendor/bin/phpunit --colors=always
  echo "- Unit tests passed. Success! üèÜ"
}

function code_sniffer_php
{
  echo "[Task] - Execute Code Sniffer (PHP) in folders:"
  echo "         $positional_1 $positional_2 $positional_3 $positional_4 $positional_5 $positional_6 $positional_7 $positional_8 $positional_9"
  ./vendor/bin/phpcs --runtime-set ignore_warnings_on_exit true --standard=ruleset.xml --report=summary $positional_1 $positional_2 $positional_3 $positional_4 $positional_5 $positional_6 $positional_7 $positional_8 $positional_9
  echo "- Success! üç∫"
}

function code_sniffer_php_change_only
{
  echo "[Task] - Execute Code Sniffer (PHP) on changed files:"
  if [[ $(git diff --staged --name-only -- '*.php') ]]; then
    git diff --staged --diff-filter=ACM --name-only -- '*.php' | xargs  ./vendor/bin/phpcs --runtime-set ignore_warnings_on_exit true --standard=ruleset.xml --report=summary
    echo "- Success! üç∫"
  else
    echo "No files staged for commit üö´."
  fi
}

function code_sniffer_autofix_php
{
  echo "[Task] - Automatically Fix Code Style Issues (PHP) in folders:"
  echo "         $positional_1 $positional_2 $positional_3 $positional_4 $positional_5 $positional_6 $positional_7 $positional_8 $positional_9"
  echo
  echo "         Note: This will only fix what the tool is capable of fixing."
  echo "         You may need to fix some manually..."
  ./vendor/bin/phpcbf --standard=PSR12 $positional_1 $positional_2 $positional_3 $positional_4 $positional_5 $positional_6 $positional_7 $positional_8 $positional_9
  echo "- Done! üèÜ"
}

function static_analysis_php
{
  echo "[Task] - Execute Static Analysis (PHP)"
  ./vendor/bin/phpstan analyse
  echo "- Success! üèÜ"
}

# Run selected command
run "$@";
